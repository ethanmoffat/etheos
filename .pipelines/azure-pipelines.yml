name: 0.7.1.$(rev:rrrr)

trigger:
  branches:
    include:
    - master

schedules:
- cron: 8 0 * * 0 # 8 - hour (UTC) | 0 - minute | * - any day | * - any month | 0 - sunday
  displayName: 'Scheduled Build'
  branches:
    include:
      - master
  always: true

stages:
- stage: build_test
  displayName: 'Build + Test'
  jobs:
  - job: build_linux
    displayName: 'Build - Release - Ubuntu (MariaDB + SQL Server + Sqlite)'
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: self
      lfs: true
    - script: sudo ./install-deps.sh
      displayName: 'Install build dependencies'
      workingDirectory: 'scripts'
    - script: ./build-linux.sh -c --sqlserver ON --mariadb ON --sqlite ON
      displayName: 'Build'
    - script: ./eoserv_test
      displayName: 'Test'
      workingDirectory: $(Build.SourcesDirectory)/install/test
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'install'
        ArtifactName: 'linux'
        publishLocation: 'Container'

  - job: build_windows
    displayName: 'Build - Release - Windows (MariaDB + SQL Server + Sqlite)'
    pool:
      vmImage: 'windows-2019'
    steps:
    - checkout: self
      lfs: true
    - task: PowerShell@2
      displayName: 'Install build dependencies'
      inputs:
        filePath: '.\scripts\install-deps.ps1'
        arguments: '-SkipCMake' # CMake is installed on the windows-2019 image
    - task: PowerShell@2
      displayName: 'Build'
      inputs:
        filePath: '.\build-windows.ps1'
        arguments: '-Clean -SqlServer ON -MariaDB ON -Sqlite ON'
    - script: .\eoserv_test.exe
      displayName: 'Test'
      workingDirectory: $(Build.SourcesDirectory)\install\test
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'install'
        ArtifactName: 'windows'
        publishLocation: 'Container'

  - job: build_docker
    displayName: 'Docker Smoke Test'
    dependsOn: build_linux
    condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.Reason'], 'Schedule')))
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: self
      lfs: true
    - task: DownloadBuildArtifacts@0
      displayName: 'Download linux build artifact'
      inputs:
        downloadType: 'single'
        artifactName: 'linux'
        downloadPath: '$(Build.SourcesDirectory)'
    - task: DownloadGitHubRelease@0
      displayName: 'Download EOBot release'
      inputs:
        connection: github_oauth
        userRepository: ethanmoffat/EndlessClient
        itemPattern: '**/EOBot.Linux.zip'
    - script: mv linux install
      displayName: 'Rename linux dir -> install'
    - script: chmod +x install/etheos
      displayName: 'Make etheos binary executable'
    - task: ExtractFiles@1
      displayName: 'Extract EOBot release'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/EOBot.Linux.zip'
        destinationFolder: $(System.ArtifactsDirectory)/eobot
    - task: Docker@2
      displayName: 'Build etheos image'
      inputs:
        repository: 'darthchungis/etheos'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildNumber)
          latest
        addPipelineData: false
        addBaseImageData: false
    - script: |
        apt-get update -y
        apt-get install unzip wget gzip

        wget https://etheosstorage.blob.core.windows.net/data/sample-data.zip
        unzip sample-data.zip -d .

        docker run --rm --name testcontainer -v $(pwd)/sample-data/:/etheos/data -e ETHEOS_DBTYPE=sqlite -e ETHEOS_DBHOST=database.sdb -e "ETHEOS_INSTALLSQL=./install.sql" -e ETHEOS_PORT=8078 -p 8078:8078 darthchungis/etheos &
        sleep 5

        TESTCONTAINERSTATUS=$(docker inspect -f '{{.State.Status}}' testcontainer)
        if [[ "$TESTCONTAINERSTATUS" != "running" ]]; then
            EXITCODE=1
        else
            EXITCODE=0
            docker save -o image.tar darthchungis/etheos
            gzip -1 image.tar
        fi

        docker stop testcontainer

        exit $EXITCODE
      displayName: 'Download sample data and test run container'
    - script: deploy/ci-test.sh --self-contained --botdir $(System.ArtifactsDirectory)/eobot/net8.0 --datadir $(pwd)/sample-data/ --image-version $(Build.BuildNumber) --no-pull
      displayName: 'Run CI tests'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish docker image for export'
      inputs:
        PathtoPublish: image.tar.gz
        ArtifactName: image
        publishLocation: Container

  - job: tag_and_publish
    displayName: 'Tag sources and publish build number'
    dependsOn: [ 'build_windows', 'build_linux', 'build_docker' ]
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - checkout: self
      lfs: true
      persistCredentials: true
    - script: |
        git tag build/$(Build.BuildNumber)
        git push origin build/$(Build.BuildNumber)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag sources'
    - script: echo $(Build.BuildNumber) > $(Build.ArtifactStagingDirectory)/BUILD_NUMBER
      displayName: 'Store build number in file'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build number as artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'build_number'
        publishLocation: 'Container'

- stage: release
  displayName: 'Push docker + deploy sample server'
  dependsOn: build_test
  condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
  jobs:
  - deployment: deploy_to_test
    displayName: 'Deploy etheos to test environment'
    environment: etheos-test-northcentralus.etheos-test
    workspace:
      clean: all
    variables:
      containerName: etheos_test_deployment
      configDir: /opt/etheos/config_local
      dataDir: /opt/etheos/sample-data
      dataSourceZip: https://etheosstorage.blob.core.windows.net/data/sample-data.zip
      logDir: /opt/etheos/logs
      backupRoot: /mnt/etheos-logs/test/backup
      imageName: darthchungis/etheos
    strategy:
      runOnce:
        deploy:
          steps:
          # Clone sources
          - checkout: self
            lfs: true
            path: _etheos # this path is relative to $(Agent.BuildDirectory) and must be unrooted
          - checkout: git://etheos/etheos-config
            path: _etheos-config  # this path is relative to $(Agent.BuildDirectory) and must be unrooted

          # Download artifacts
          # Build artifacts are downloaded automatically as part of deploy job
          - task: AzureKeyVault@2
            displayName: Download database password
            inputs:
              azureSubscription: 3970731b-6a1c-4581-b183-1b1b0e62e33d
              KeyVaultName: etheos-vault
              SecretsFilter: sqlDbPass

          # Deploy steps
          - task: CmdLine@2
            displayName: 00 Load docker image
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/00_load_image.sh $(Agent.BuildDirectory)/image
              failOnStderr: true
          - task: CmdLine@2
            displayName: 01 Copy configs to persistent store
            inputs:
              script: sudo $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/01_copy_configs.sh $(Agent.BuildDirectory)/_etheos-config $(configDir)
              failOnStderr: true
          - task: CmdLine@2
            displayName: 02 Download + Extract Sample Data
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/02_get_data.sh $(dataSourceZip) $(dataDir)
              failOnStderr: true
          - task: CmdLine@2
            displayName: 03 Stop old container
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/03_delete_existing.sh $(containerName)
              failOnStderr: true
          - task: CmdLine@2
            displayName: 04 Backup old log files
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/04_backup_logs.sh $(logDir) $(configDir) $(backupRoot)
              failOnStderr: true
          - task: CmdLine@2
            displayName: 05 Store + protect dbpass
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/05_setup_dbpass.sh $(configDir) '$(sqlDbPass)'
              failOnStderr: true
          - task: CmdLine@2
            displayName: 06 Deploy Container
            inputs:
              script: $(Agent.BuildDirectory)/_etheos/.pipelines/release/scripts/06_deploy_container.sh $(Build.BuildNumber) $(containerName) $(imageName) $(logDir) $(configDir) $(dataDir)
              failOnStderr: true

  - job: publish_image
    displayName: 'Publish etheos image to docker hub'
    pool:
      vmImage: 'ubuntu-22.04'
    variables:
      imageRegistry: docker_hub
      imageName: darthchungis/etheos
    steps:
    - checkout: self
      lfs: true
    - task: DownloadBuildArtifacts@1
      displayName: Download docker image tarball
      inputs:
        downloadType: specific
        buildType: current
        artifactName: image
        downloadPath: '$(System.DefaultWorkingDirectory)/_etheos-artifacts'
    - task: CmdLine@2
      displayName: Load docker image
      inputs:
        script: $(Build.SourcesDirectory)/.pipelines/release/scripts/00_load_image.sh $(System.DefaultWorkingDirectory)/_etheos-artifacts/image
        failOnStderr: true
    - task: Docker@2
      displayName: Docker login
      inputs:
        containerRegistry: docker_hub # this is a service connection set up in the project
        command: login
        addPipelineData: false
        addBaseImageData: false
    - task: Docker@2
      displayName: Docker push
      inputs:
        containerRegistry: docker_hub # this is a service connection set up in the project
        repository: $(imageName)
        command: push
        tags: |
          $(Build.BuildNumber)
          latest
